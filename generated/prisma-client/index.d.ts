// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  user: (where?: UserWhereInput) => Promise<boolean>;
  userVote: (where?: UserVoteWhereInput) => Promise<boolean>;
  vote: (where?: VoteWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userVote: (where: UserVoteWhereUniqueInput) => UserVoteNullablePromise;
  userVotes: (args?: {
    where?: UserVoteWhereInput;
    orderBy?: UserVoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserVote>;
  userVotesConnection: (args?: {
    where?: UserVoteWhereInput;
    orderBy?: UserVoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserVoteConnectionPromise;
  vote: (where: VoteWhereUniqueInput) => VoteNullablePromise;
  votes: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Vote>;
  votesConnection: (args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VoteConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserVote: (data: UserVoteCreateInput) => UserVotePromise;
  updateUserVote: (args: {
    data: UserVoteUpdateInput;
    where: UserVoteWhereUniqueInput;
  }) => UserVotePromise;
  updateManyUserVotes: (args: {
    data: UserVoteUpdateManyMutationInput;
    where?: UserVoteWhereInput;
  }) => BatchPayloadPromise;
  upsertUserVote: (args: {
    where: UserVoteWhereUniqueInput;
    create: UserVoteCreateInput;
    update: UserVoteUpdateInput;
  }) => UserVotePromise;
  deleteUserVote: (where: UserVoteWhereUniqueInput) => UserVotePromise;
  deleteManyUserVotes: (where?: UserVoteWhereInput) => BatchPayloadPromise;
  createVote: (data: VoteCreateInput) => VotePromise;
  updateVote: (args: {
    data: VoteUpdateInput;
    where: VoteWhereUniqueInput;
  }) => VotePromise;
  updateManyVotes: (args: {
    data: VoteUpdateManyMutationInput;
    where?: VoteWhereInput;
  }) => BatchPayloadPromise;
  upsertVote: (args: {
    where: VoteWhereUniqueInput;
    create: VoteCreateInput;
    update: VoteUpdateInput;
  }) => VotePromise;
  deleteVote: (where: VoteWhereUniqueInput) => VotePromise;
  deleteManyVotes: (where?: VoteWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userVote: (
    where?: UserVoteSubscriptionWhereInput
  ) => UserVoteSubscriptionPayloadSubscription;
  vote: (
    where?: VoteSubscriptionWhereInput
  ) => VoteSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type VoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "val1_ASC"
  | "val1_DESC"
  | "val2_ASC"
  | "val2_DESC"
  | "val3_ASC"
  | "val3_DESC"
  | "val4_ASC"
  | "val4_DESC"
  | "val5_ASC"
  | "val5_DESC"
  | "val6_ASC"
  | "val6_DESC"
  | "val7_ASC"
  | "val7_DESC"
  | "val8_ASC"
  | "val8_DESC"
  | "val9_ASC"
  | "val9_DESC"
  | "val10_ASC"
  | "val10_DESC"
  | "val11_ASC"
  | "val11_DESC"
  | "val12_ASC"
  | "val12_DESC"
  | "val13_ASC"
  | "val13_DESC"
  | "val14_ASC"
  | "val14_DESC"
  | "val15_ASC"
  | "val15_DESC"
  | "val16_ASC"
  | "val16_DESC"
  | "val17_ASC"
  | "val17_DESC"
  | "val18_ASC"
  | "val18_DESC"
  | "val19_ASC"
  | "val19_DESC"
  | "val20_ASC"
  | "val20_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC";

export type UserVoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "voteSelect_ASC"
  | "voteSelect_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface VoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  upperVote_every?: Maybe<VoteWhereInput>;
  upperVote_some?: Maybe<VoteWhereInput>;
  upperVote_none?: Maybe<VoteWhereInput>;
  lowerVote_every?: Maybe<VoteWhereInput>;
  lowerVote_some?: Maybe<VoteWhereInput>;
  lowerVote_none?: Maybe<VoteWhereInput>;
  val1?: Maybe<String>;
  val1_not?: Maybe<String>;
  val1_in?: Maybe<String[] | String>;
  val1_not_in?: Maybe<String[] | String>;
  val1_lt?: Maybe<String>;
  val1_lte?: Maybe<String>;
  val1_gt?: Maybe<String>;
  val1_gte?: Maybe<String>;
  val1_contains?: Maybe<String>;
  val1_not_contains?: Maybe<String>;
  val1_starts_with?: Maybe<String>;
  val1_not_starts_with?: Maybe<String>;
  val1_ends_with?: Maybe<String>;
  val1_not_ends_with?: Maybe<String>;
  val2?: Maybe<String>;
  val2_not?: Maybe<String>;
  val2_in?: Maybe<String[] | String>;
  val2_not_in?: Maybe<String[] | String>;
  val2_lt?: Maybe<String>;
  val2_lte?: Maybe<String>;
  val2_gt?: Maybe<String>;
  val2_gte?: Maybe<String>;
  val2_contains?: Maybe<String>;
  val2_not_contains?: Maybe<String>;
  val2_starts_with?: Maybe<String>;
  val2_not_starts_with?: Maybe<String>;
  val2_ends_with?: Maybe<String>;
  val2_not_ends_with?: Maybe<String>;
  val3?: Maybe<String>;
  val3_not?: Maybe<String>;
  val3_in?: Maybe<String[] | String>;
  val3_not_in?: Maybe<String[] | String>;
  val3_lt?: Maybe<String>;
  val3_lte?: Maybe<String>;
  val3_gt?: Maybe<String>;
  val3_gte?: Maybe<String>;
  val3_contains?: Maybe<String>;
  val3_not_contains?: Maybe<String>;
  val3_starts_with?: Maybe<String>;
  val3_not_starts_with?: Maybe<String>;
  val3_ends_with?: Maybe<String>;
  val3_not_ends_with?: Maybe<String>;
  val4?: Maybe<String>;
  val4_not?: Maybe<String>;
  val4_in?: Maybe<String[] | String>;
  val4_not_in?: Maybe<String[] | String>;
  val4_lt?: Maybe<String>;
  val4_lte?: Maybe<String>;
  val4_gt?: Maybe<String>;
  val4_gte?: Maybe<String>;
  val4_contains?: Maybe<String>;
  val4_not_contains?: Maybe<String>;
  val4_starts_with?: Maybe<String>;
  val4_not_starts_with?: Maybe<String>;
  val4_ends_with?: Maybe<String>;
  val4_not_ends_with?: Maybe<String>;
  val5?: Maybe<String>;
  val5_not?: Maybe<String>;
  val5_in?: Maybe<String[] | String>;
  val5_not_in?: Maybe<String[] | String>;
  val5_lt?: Maybe<String>;
  val5_lte?: Maybe<String>;
  val5_gt?: Maybe<String>;
  val5_gte?: Maybe<String>;
  val5_contains?: Maybe<String>;
  val5_not_contains?: Maybe<String>;
  val5_starts_with?: Maybe<String>;
  val5_not_starts_with?: Maybe<String>;
  val5_ends_with?: Maybe<String>;
  val5_not_ends_with?: Maybe<String>;
  val6?: Maybe<String>;
  val6_not?: Maybe<String>;
  val6_in?: Maybe<String[] | String>;
  val6_not_in?: Maybe<String[] | String>;
  val6_lt?: Maybe<String>;
  val6_lte?: Maybe<String>;
  val6_gt?: Maybe<String>;
  val6_gte?: Maybe<String>;
  val6_contains?: Maybe<String>;
  val6_not_contains?: Maybe<String>;
  val6_starts_with?: Maybe<String>;
  val6_not_starts_with?: Maybe<String>;
  val6_ends_with?: Maybe<String>;
  val6_not_ends_with?: Maybe<String>;
  val7?: Maybe<String>;
  val7_not?: Maybe<String>;
  val7_in?: Maybe<String[] | String>;
  val7_not_in?: Maybe<String[] | String>;
  val7_lt?: Maybe<String>;
  val7_lte?: Maybe<String>;
  val7_gt?: Maybe<String>;
  val7_gte?: Maybe<String>;
  val7_contains?: Maybe<String>;
  val7_not_contains?: Maybe<String>;
  val7_starts_with?: Maybe<String>;
  val7_not_starts_with?: Maybe<String>;
  val7_ends_with?: Maybe<String>;
  val7_not_ends_with?: Maybe<String>;
  val8?: Maybe<String>;
  val8_not?: Maybe<String>;
  val8_in?: Maybe<String[] | String>;
  val8_not_in?: Maybe<String[] | String>;
  val8_lt?: Maybe<String>;
  val8_lte?: Maybe<String>;
  val8_gt?: Maybe<String>;
  val8_gte?: Maybe<String>;
  val8_contains?: Maybe<String>;
  val8_not_contains?: Maybe<String>;
  val8_starts_with?: Maybe<String>;
  val8_not_starts_with?: Maybe<String>;
  val8_ends_with?: Maybe<String>;
  val8_not_ends_with?: Maybe<String>;
  val9?: Maybe<String>;
  val9_not?: Maybe<String>;
  val9_in?: Maybe<String[] | String>;
  val9_not_in?: Maybe<String[] | String>;
  val9_lt?: Maybe<String>;
  val9_lte?: Maybe<String>;
  val9_gt?: Maybe<String>;
  val9_gte?: Maybe<String>;
  val9_contains?: Maybe<String>;
  val9_not_contains?: Maybe<String>;
  val9_starts_with?: Maybe<String>;
  val9_not_starts_with?: Maybe<String>;
  val9_ends_with?: Maybe<String>;
  val9_not_ends_with?: Maybe<String>;
  val10?: Maybe<String>;
  val10_not?: Maybe<String>;
  val10_in?: Maybe<String[] | String>;
  val10_not_in?: Maybe<String[] | String>;
  val10_lt?: Maybe<String>;
  val10_lte?: Maybe<String>;
  val10_gt?: Maybe<String>;
  val10_gte?: Maybe<String>;
  val10_contains?: Maybe<String>;
  val10_not_contains?: Maybe<String>;
  val10_starts_with?: Maybe<String>;
  val10_not_starts_with?: Maybe<String>;
  val10_ends_with?: Maybe<String>;
  val10_not_ends_with?: Maybe<String>;
  val11?: Maybe<String>;
  val11_not?: Maybe<String>;
  val11_in?: Maybe<String[] | String>;
  val11_not_in?: Maybe<String[] | String>;
  val11_lt?: Maybe<String>;
  val11_lte?: Maybe<String>;
  val11_gt?: Maybe<String>;
  val11_gte?: Maybe<String>;
  val11_contains?: Maybe<String>;
  val11_not_contains?: Maybe<String>;
  val11_starts_with?: Maybe<String>;
  val11_not_starts_with?: Maybe<String>;
  val11_ends_with?: Maybe<String>;
  val11_not_ends_with?: Maybe<String>;
  val12?: Maybe<String>;
  val12_not?: Maybe<String>;
  val12_in?: Maybe<String[] | String>;
  val12_not_in?: Maybe<String[] | String>;
  val12_lt?: Maybe<String>;
  val12_lte?: Maybe<String>;
  val12_gt?: Maybe<String>;
  val12_gte?: Maybe<String>;
  val12_contains?: Maybe<String>;
  val12_not_contains?: Maybe<String>;
  val12_starts_with?: Maybe<String>;
  val12_not_starts_with?: Maybe<String>;
  val12_ends_with?: Maybe<String>;
  val12_not_ends_with?: Maybe<String>;
  val13?: Maybe<String>;
  val13_not?: Maybe<String>;
  val13_in?: Maybe<String[] | String>;
  val13_not_in?: Maybe<String[] | String>;
  val13_lt?: Maybe<String>;
  val13_lte?: Maybe<String>;
  val13_gt?: Maybe<String>;
  val13_gte?: Maybe<String>;
  val13_contains?: Maybe<String>;
  val13_not_contains?: Maybe<String>;
  val13_starts_with?: Maybe<String>;
  val13_not_starts_with?: Maybe<String>;
  val13_ends_with?: Maybe<String>;
  val13_not_ends_with?: Maybe<String>;
  val14?: Maybe<String>;
  val14_not?: Maybe<String>;
  val14_in?: Maybe<String[] | String>;
  val14_not_in?: Maybe<String[] | String>;
  val14_lt?: Maybe<String>;
  val14_lte?: Maybe<String>;
  val14_gt?: Maybe<String>;
  val14_gte?: Maybe<String>;
  val14_contains?: Maybe<String>;
  val14_not_contains?: Maybe<String>;
  val14_starts_with?: Maybe<String>;
  val14_not_starts_with?: Maybe<String>;
  val14_ends_with?: Maybe<String>;
  val14_not_ends_with?: Maybe<String>;
  val15?: Maybe<String>;
  val15_not?: Maybe<String>;
  val15_in?: Maybe<String[] | String>;
  val15_not_in?: Maybe<String[] | String>;
  val15_lt?: Maybe<String>;
  val15_lte?: Maybe<String>;
  val15_gt?: Maybe<String>;
  val15_gte?: Maybe<String>;
  val15_contains?: Maybe<String>;
  val15_not_contains?: Maybe<String>;
  val15_starts_with?: Maybe<String>;
  val15_not_starts_with?: Maybe<String>;
  val15_ends_with?: Maybe<String>;
  val15_not_ends_with?: Maybe<String>;
  val16?: Maybe<String>;
  val16_not?: Maybe<String>;
  val16_in?: Maybe<String[] | String>;
  val16_not_in?: Maybe<String[] | String>;
  val16_lt?: Maybe<String>;
  val16_lte?: Maybe<String>;
  val16_gt?: Maybe<String>;
  val16_gte?: Maybe<String>;
  val16_contains?: Maybe<String>;
  val16_not_contains?: Maybe<String>;
  val16_starts_with?: Maybe<String>;
  val16_not_starts_with?: Maybe<String>;
  val16_ends_with?: Maybe<String>;
  val16_not_ends_with?: Maybe<String>;
  val17?: Maybe<String>;
  val17_not?: Maybe<String>;
  val17_in?: Maybe<String[] | String>;
  val17_not_in?: Maybe<String[] | String>;
  val17_lt?: Maybe<String>;
  val17_lte?: Maybe<String>;
  val17_gt?: Maybe<String>;
  val17_gte?: Maybe<String>;
  val17_contains?: Maybe<String>;
  val17_not_contains?: Maybe<String>;
  val17_starts_with?: Maybe<String>;
  val17_not_starts_with?: Maybe<String>;
  val17_ends_with?: Maybe<String>;
  val17_not_ends_with?: Maybe<String>;
  val18?: Maybe<String>;
  val18_not?: Maybe<String>;
  val18_in?: Maybe<String[] | String>;
  val18_not_in?: Maybe<String[] | String>;
  val18_lt?: Maybe<String>;
  val18_lte?: Maybe<String>;
  val18_gt?: Maybe<String>;
  val18_gte?: Maybe<String>;
  val18_contains?: Maybe<String>;
  val18_not_contains?: Maybe<String>;
  val18_starts_with?: Maybe<String>;
  val18_not_starts_with?: Maybe<String>;
  val18_ends_with?: Maybe<String>;
  val18_not_ends_with?: Maybe<String>;
  val19?: Maybe<String>;
  val19_not?: Maybe<String>;
  val19_in?: Maybe<String[] | String>;
  val19_not_in?: Maybe<String[] | String>;
  val19_lt?: Maybe<String>;
  val19_lte?: Maybe<String>;
  val19_gt?: Maybe<String>;
  val19_gte?: Maybe<String>;
  val19_contains?: Maybe<String>;
  val19_not_contains?: Maybe<String>;
  val19_starts_with?: Maybe<String>;
  val19_not_starts_with?: Maybe<String>;
  val19_ends_with?: Maybe<String>;
  val19_not_ends_with?: Maybe<String>;
  val20?: Maybe<String>;
  val20_not?: Maybe<String>;
  val20_in?: Maybe<String[] | String>;
  val20_not_in?: Maybe<String[] | String>;
  val20_lt?: Maybe<String>;
  val20_lte?: Maybe<String>;
  val20_gt?: Maybe<String>;
  val20_gte?: Maybe<String>;
  val20_contains?: Maybe<String>;
  val20_not_contains?: Maybe<String>;
  val20_starts_with?: Maybe<String>;
  val20_not_starts_with?: Maybe<String>;
  val20_ends_with?: Maybe<String>;
  val20_not_ends_with?: Maybe<String>;
  AND?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  OR?: Maybe<VoteWhereInput[] | VoteWhereInput>;
  NOT?: Maybe<VoteWhereInput[] | VoteWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  votes_every?: Maybe<VoteWhereInput>;
  votes_some?: Maybe<VoteWhereInput>;
  votes_none?: Maybe<VoteWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserVoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserVoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  vote?: Maybe<VoteWhereInput>;
  voteSelect?: Maybe<String>;
  voteSelect_not?: Maybe<String>;
  voteSelect_in?: Maybe<String[] | String>;
  voteSelect_not_in?: Maybe<String[] | String>;
  voteSelect_lt?: Maybe<String>;
  voteSelect_lte?: Maybe<String>;
  voteSelect_gt?: Maybe<String>;
  voteSelect_gte?: Maybe<String>;
  voteSelect_contains?: Maybe<String>;
  voteSelect_not_contains?: Maybe<String>;
  voteSelect_starts_with?: Maybe<String>;
  voteSelect_not_starts_with?: Maybe<String>;
  voteSelect_ends_with?: Maybe<String>;
  voteSelect_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserVoteWhereInput[] | UserVoteWhereInput>;
  OR?: Maybe<UserVoteWhereInput[] | UserVoteWhereInput>;
  NOT?: Maybe<UserVoteWhereInput[] | UserVoteWhereInput>;
}

export type VoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  votes?: Maybe<VoteCreateManyInput>;
}

export interface VoteCreateManyInput {
  create?: Maybe<VoteCreateInput[] | VoteCreateInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  upperVote?: Maybe<VoteCreateManyWithoutLowerVoteInput>;
  lowerVote?: Maybe<VoteCreateManyWithoutUpperVoteInput>;
  val1?: Maybe<String>;
  val2?: Maybe<String>;
  val3?: Maybe<String>;
  val4?: Maybe<String>;
  val5?: Maybe<String>;
  val6?: Maybe<String>;
  val7?: Maybe<String>;
  val8?: Maybe<String>;
  val9?: Maybe<String>;
  val10?: Maybe<String>;
  val11?: Maybe<String>;
  val12?: Maybe<String>;
  val13?: Maybe<String>;
  val14?: Maybe<String>;
  val15?: Maybe<String>;
  val16?: Maybe<String>;
  val17?: Maybe<String>;
  val18?: Maybe<String>;
  val19?: Maybe<String>;
  val20?: Maybe<String>;
}

export interface VoteCreateManyWithoutLowerVoteInput {
  create?: Maybe<
    VoteCreateWithoutLowerVoteInput[] | VoteCreateWithoutLowerVoteInput
  >;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateWithoutLowerVoteInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  upperVote?: Maybe<VoteCreateManyWithoutLowerVoteInput>;
  val1?: Maybe<String>;
  val2?: Maybe<String>;
  val3?: Maybe<String>;
  val4?: Maybe<String>;
  val5?: Maybe<String>;
  val6?: Maybe<String>;
  val7?: Maybe<String>;
  val8?: Maybe<String>;
  val9?: Maybe<String>;
  val10?: Maybe<String>;
  val11?: Maybe<String>;
  val12?: Maybe<String>;
  val13?: Maybe<String>;
  val14?: Maybe<String>;
  val15?: Maybe<String>;
  val16?: Maybe<String>;
  val17?: Maybe<String>;
  val18?: Maybe<String>;
  val19?: Maybe<String>;
  val20?: Maybe<String>;
}

export interface VoteCreateManyWithoutUpperVoteInput {
  create?: Maybe<
    VoteCreateWithoutUpperVoteInput[] | VoteCreateWithoutUpperVoteInput
  >;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
}

export interface VoteCreateWithoutUpperVoteInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  lowerVote?: Maybe<VoteCreateManyWithoutUpperVoteInput>;
  val1?: Maybe<String>;
  val2?: Maybe<String>;
  val3?: Maybe<String>;
  val4?: Maybe<String>;
  val5?: Maybe<String>;
  val6?: Maybe<String>;
  val7?: Maybe<String>;
  val8?: Maybe<String>;
  val9?: Maybe<String>;
  val10?: Maybe<String>;
  val11?: Maybe<String>;
  val12?: Maybe<String>;
  val13?: Maybe<String>;
  val14?: Maybe<String>;
  val15?: Maybe<String>;
  val16?: Maybe<String>;
  val17?: Maybe<String>;
  val18?: Maybe<String>;
  val19?: Maybe<String>;
  val20?: Maybe<String>;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyInput>;
}

export interface VoteUpdateManyInput {
  create?: Maybe<VoteCreateInput[] | VoteCreateInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueNestedInput[]
    | VoteUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueNestedInput[]
    | VoteUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  updateMany?: Maybe<
    VoteUpdateManyWithWhereNestedInput[] | VoteUpdateManyWithWhereNestedInput
  >;
}

export interface VoteUpdateWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateDataInput;
}

export interface VoteUpdateDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  upperVote?: Maybe<VoteUpdateManyWithoutLowerVoteInput>;
  lowerVote?: Maybe<VoteUpdateManyWithoutUpperVoteInput>;
  val1?: Maybe<String>;
  val2?: Maybe<String>;
  val3?: Maybe<String>;
  val4?: Maybe<String>;
  val5?: Maybe<String>;
  val6?: Maybe<String>;
  val7?: Maybe<String>;
  val8?: Maybe<String>;
  val9?: Maybe<String>;
  val10?: Maybe<String>;
  val11?: Maybe<String>;
  val12?: Maybe<String>;
  val13?: Maybe<String>;
  val14?: Maybe<String>;
  val15?: Maybe<String>;
  val16?: Maybe<String>;
  val17?: Maybe<String>;
  val18?: Maybe<String>;
  val19?: Maybe<String>;
  val20?: Maybe<String>;
}

export interface VoteUpdateManyWithoutLowerVoteInput {
  create?: Maybe<
    VoteCreateWithoutLowerVoteInput[] | VoteCreateWithoutLowerVoteInput
  >;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutLowerVoteInput[]
    | VoteUpdateWithWhereUniqueWithoutLowerVoteInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutLowerVoteInput[]
    | VoteUpsertWithWhereUniqueWithoutLowerVoteInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  updateMany?: Maybe<
    VoteUpdateManyWithWhereNestedInput[] | VoteUpdateManyWithWhereNestedInput
  >;
}

export interface VoteUpdateWithWhereUniqueWithoutLowerVoteInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutLowerVoteDataInput;
}

export interface VoteUpdateWithoutLowerVoteDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  upperVote?: Maybe<VoteUpdateManyWithoutLowerVoteInput>;
  val1?: Maybe<String>;
  val2?: Maybe<String>;
  val3?: Maybe<String>;
  val4?: Maybe<String>;
  val5?: Maybe<String>;
  val6?: Maybe<String>;
  val7?: Maybe<String>;
  val8?: Maybe<String>;
  val9?: Maybe<String>;
  val10?: Maybe<String>;
  val11?: Maybe<String>;
  val12?: Maybe<String>;
  val13?: Maybe<String>;
  val14?: Maybe<String>;
  val15?: Maybe<String>;
  val16?: Maybe<String>;
  val17?: Maybe<String>;
  val18?: Maybe<String>;
  val19?: Maybe<String>;
  val20?: Maybe<String>;
}

export interface VoteUpsertWithWhereUniqueWithoutLowerVoteInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutLowerVoteDataInput;
  create: VoteCreateWithoutLowerVoteInput;
}

export interface VoteScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  val1?: Maybe<String>;
  val1_not?: Maybe<String>;
  val1_in?: Maybe<String[] | String>;
  val1_not_in?: Maybe<String[] | String>;
  val1_lt?: Maybe<String>;
  val1_lte?: Maybe<String>;
  val1_gt?: Maybe<String>;
  val1_gte?: Maybe<String>;
  val1_contains?: Maybe<String>;
  val1_not_contains?: Maybe<String>;
  val1_starts_with?: Maybe<String>;
  val1_not_starts_with?: Maybe<String>;
  val1_ends_with?: Maybe<String>;
  val1_not_ends_with?: Maybe<String>;
  val2?: Maybe<String>;
  val2_not?: Maybe<String>;
  val2_in?: Maybe<String[] | String>;
  val2_not_in?: Maybe<String[] | String>;
  val2_lt?: Maybe<String>;
  val2_lte?: Maybe<String>;
  val2_gt?: Maybe<String>;
  val2_gte?: Maybe<String>;
  val2_contains?: Maybe<String>;
  val2_not_contains?: Maybe<String>;
  val2_starts_with?: Maybe<String>;
  val2_not_starts_with?: Maybe<String>;
  val2_ends_with?: Maybe<String>;
  val2_not_ends_with?: Maybe<String>;
  val3?: Maybe<String>;
  val3_not?: Maybe<String>;
  val3_in?: Maybe<String[] | String>;
  val3_not_in?: Maybe<String[] | String>;
  val3_lt?: Maybe<String>;
  val3_lte?: Maybe<String>;
  val3_gt?: Maybe<String>;
  val3_gte?: Maybe<String>;
  val3_contains?: Maybe<String>;
  val3_not_contains?: Maybe<String>;
  val3_starts_with?: Maybe<String>;
  val3_not_starts_with?: Maybe<String>;
  val3_ends_with?: Maybe<String>;
  val3_not_ends_with?: Maybe<String>;
  val4?: Maybe<String>;
  val4_not?: Maybe<String>;
  val4_in?: Maybe<String[] | String>;
  val4_not_in?: Maybe<String[] | String>;
  val4_lt?: Maybe<String>;
  val4_lte?: Maybe<String>;
  val4_gt?: Maybe<String>;
  val4_gte?: Maybe<String>;
  val4_contains?: Maybe<String>;
  val4_not_contains?: Maybe<String>;
  val4_starts_with?: Maybe<String>;
  val4_not_starts_with?: Maybe<String>;
  val4_ends_with?: Maybe<String>;
  val4_not_ends_with?: Maybe<String>;
  val5?: Maybe<String>;
  val5_not?: Maybe<String>;
  val5_in?: Maybe<String[] | String>;
  val5_not_in?: Maybe<String[] | String>;
  val5_lt?: Maybe<String>;
  val5_lte?: Maybe<String>;
  val5_gt?: Maybe<String>;
  val5_gte?: Maybe<String>;
  val5_contains?: Maybe<String>;
  val5_not_contains?: Maybe<String>;
  val5_starts_with?: Maybe<String>;
  val5_not_starts_with?: Maybe<String>;
  val5_ends_with?: Maybe<String>;
  val5_not_ends_with?: Maybe<String>;
  val6?: Maybe<String>;
  val6_not?: Maybe<String>;
  val6_in?: Maybe<String[] | String>;
  val6_not_in?: Maybe<String[] | String>;
  val6_lt?: Maybe<String>;
  val6_lte?: Maybe<String>;
  val6_gt?: Maybe<String>;
  val6_gte?: Maybe<String>;
  val6_contains?: Maybe<String>;
  val6_not_contains?: Maybe<String>;
  val6_starts_with?: Maybe<String>;
  val6_not_starts_with?: Maybe<String>;
  val6_ends_with?: Maybe<String>;
  val6_not_ends_with?: Maybe<String>;
  val7?: Maybe<String>;
  val7_not?: Maybe<String>;
  val7_in?: Maybe<String[] | String>;
  val7_not_in?: Maybe<String[] | String>;
  val7_lt?: Maybe<String>;
  val7_lte?: Maybe<String>;
  val7_gt?: Maybe<String>;
  val7_gte?: Maybe<String>;
  val7_contains?: Maybe<String>;
  val7_not_contains?: Maybe<String>;
  val7_starts_with?: Maybe<String>;
  val7_not_starts_with?: Maybe<String>;
  val7_ends_with?: Maybe<String>;
  val7_not_ends_with?: Maybe<String>;
  val8?: Maybe<String>;
  val8_not?: Maybe<String>;
  val8_in?: Maybe<String[] | String>;
  val8_not_in?: Maybe<String[] | String>;
  val8_lt?: Maybe<String>;
  val8_lte?: Maybe<String>;
  val8_gt?: Maybe<String>;
  val8_gte?: Maybe<String>;
  val8_contains?: Maybe<String>;
  val8_not_contains?: Maybe<String>;
  val8_starts_with?: Maybe<String>;
  val8_not_starts_with?: Maybe<String>;
  val8_ends_with?: Maybe<String>;
  val8_not_ends_with?: Maybe<String>;
  val9?: Maybe<String>;
  val9_not?: Maybe<String>;
  val9_in?: Maybe<String[] | String>;
  val9_not_in?: Maybe<String[] | String>;
  val9_lt?: Maybe<String>;
  val9_lte?: Maybe<String>;
  val9_gt?: Maybe<String>;
  val9_gte?: Maybe<String>;
  val9_contains?: Maybe<String>;
  val9_not_contains?: Maybe<String>;
  val9_starts_with?: Maybe<String>;
  val9_not_starts_with?: Maybe<String>;
  val9_ends_with?: Maybe<String>;
  val9_not_ends_with?: Maybe<String>;
  val10?: Maybe<String>;
  val10_not?: Maybe<String>;
  val10_in?: Maybe<String[] | String>;
  val10_not_in?: Maybe<String[] | String>;
  val10_lt?: Maybe<String>;
  val10_lte?: Maybe<String>;
  val10_gt?: Maybe<String>;
  val10_gte?: Maybe<String>;
  val10_contains?: Maybe<String>;
  val10_not_contains?: Maybe<String>;
  val10_starts_with?: Maybe<String>;
  val10_not_starts_with?: Maybe<String>;
  val10_ends_with?: Maybe<String>;
  val10_not_ends_with?: Maybe<String>;
  val11?: Maybe<String>;
  val11_not?: Maybe<String>;
  val11_in?: Maybe<String[] | String>;
  val11_not_in?: Maybe<String[] | String>;
  val11_lt?: Maybe<String>;
  val11_lte?: Maybe<String>;
  val11_gt?: Maybe<String>;
  val11_gte?: Maybe<String>;
  val11_contains?: Maybe<String>;
  val11_not_contains?: Maybe<String>;
  val11_starts_with?: Maybe<String>;
  val11_not_starts_with?: Maybe<String>;
  val11_ends_with?: Maybe<String>;
  val11_not_ends_with?: Maybe<String>;
  val12?: Maybe<String>;
  val12_not?: Maybe<String>;
  val12_in?: Maybe<String[] | String>;
  val12_not_in?: Maybe<String[] | String>;
  val12_lt?: Maybe<String>;
  val12_lte?: Maybe<String>;
  val12_gt?: Maybe<String>;
  val12_gte?: Maybe<String>;
  val12_contains?: Maybe<String>;
  val12_not_contains?: Maybe<String>;
  val12_starts_with?: Maybe<String>;
  val12_not_starts_with?: Maybe<String>;
  val12_ends_with?: Maybe<String>;
  val12_not_ends_with?: Maybe<String>;
  val13?: Maybe<String>;
  val13_not?: Maybe<String>;
  val13_in?: Maybe<String[] | String>;
  val13_not_in?: Maybe<String[] | String>;
  val13_lt?: Maybe<String>;
  val13_lte?: Maybe<String>;
  val13_gt?: Maybe<String>;
  val13_gte?: Maybe<String>;
  val13_contains?: Maybe<String>;
  val13_not_contains?: Maybe<String>;
  val13_starts_with?: Maybe<String>;
  val13_not_starts_with?: Maybe<String>;
  val13_ends_with?: Maybe<String>;
  val13_not_ends_with?: Maybe<String>;
  val14?: Maybe<String>;
  val14_not?: Maybe<String>;
  val14_in?: Maybe<String[] | String>;
  val14_not_in?: Maybe<String[] | String>;
  val14_lt?: Maybe<String>;
  val14_lte?: Maybe<String>;
  val14_gt?: Maybe<String>;
  val14_gte?: Maybe<String>;
  val14_contains?: Maybe<String>;
  val14_not_contains?: Maybe<String>;
  val14_starts_with?: Maybe<String>;
  val14_not_starts_with?: Maybe<String>;
  val14_ends_with?: Maybe<String>;
  val14_not_ends_with?: Maybe<String>;
  val15?: Maybe<String>;
  val15_not?: Maybe<String>;
  val15_in?: Maybe<String[] | String>;
  val15_not_in?: Maybe<String[] | String>;
  val15_lt?: Maybe<String>;
  val15_lte?: Maybe<String>;
  val15_gt?: Maybe<String>;
  val15_gte?: Maybe<String>;
  val15_contains?: Maybe<String>;
  val15_not_contains?: Maybe<String>;
  val15_starts_with?: Maybe<String>;
  val15_not_starts_with?: Maybe<String>;
  val15_ends_with?: Maybe<String>;
  val15_not_ends_with?: Maybe<String>;
  val16?: Maybe<String>;
  val16_not?: Maybe<String>;
  val16_in?: Maybe<String[] | String>;
  val16_not_in?: Maybe<String[] | String>;
  val16_lt?: Maybe<String>;
  val16_lte?: Maybe<String>;
  val16_gt?: Maybe<String>;
  val16_gte?: Maybe<String>;
  val16_contains?: Maybe<String>;
  val16_not_contains?: Maybe<String>;
  val16_starts_with?: Maybe<String>;
  val16_not_starts_with?: Maybe<String>;
  val16_ends_with?: Maybe<String>;
  val16_not_ends_with?: Maybe<String>;
  val17?: Maybe<String>;
  val17_not?: Maybe<String>;
  val17_in?: Maybe<String[] | String>;
  val17_not_in?: Maybe<String[] | String>;
  val17_lt?: Maybe<String>;
  val17_lte?: Maybe<String>;
  val17_gt?: Maybe<String>;
  val17_gte?: Maybe<String>;
  val17_contains?: Maybe<String>;
  val17_not_contains?: Maybe<String>;
  val17_starts_with?: Maybe<String>;
  val17_not_starts_with?: Maybe<String>;
  val17_ends_with?: Maybe<String>;
  val17_not_ends_with?: Maybe<String>;
  val18?: Maybe<String>;
  val18_not?: Maybe<String>;
  val18_in?: Maybe<String[] | String>;
  val18_not_in?: Maybe<String[] | String>;
  val18_lt?: Maybe<String>;
  val18_lte?: Maybe<String>;
  val18_gt?: Maybe<String>;
  val18_gte?: Maybe<String>;
  val18_contains?: Maybe<String>;
  val18_not_contains?: Maybe<String>;
  val18_starts_with?: Maybe<String>;
  val18_not_starts_with?: Maybe<String>;
  val18_ends_with?: Maybe<String>;
  val18_not_ends_with?: Maybe<String>;
  val19?: Maybe<String>;
  val19_not?: Maybe<String>;
  val19_in?: Maybe<String[] | String>;
  val19_not_in?: Maybe<String[] | String>;
  val19_lt?: Maybe<String>;
  val19_lte?: Maybe<String>;
  val19_gt?: Maybe<String>;
  val19_gte?: Maybe<String>;
  val19_contains?: Maybe<String>;
  val19_not_contains?: Maybe<String>;
  val19_starts_with?: Maybe<String>;
  val19_not_starts_with?: Maybe<String>;
  val19_ends_with?: Maybe<String>;
  val19_not_ends_with?: Maybe<String>;
  val20?: Maybe<String>;
  val20_not?: Maybe<String>;
  val20_in?: Maybe<String[] | String>;
  val20_not_in?: Maybe<String[] | String>;
  val20_lt?: Maybe<String>;
  val20_lte?: Maybe<String>;
  val20_gt?: Maybe<String>;
  val20_gte?: Maybe<String>;
  val20_contains?: Maybe<String>;
  val20_not_contains?: Maybe<String>;
  val20_starts_with?: Maybe<String>;
  val20_not_starts_with?: Maybe<String>;
  val20_ends_with?: Maybe<String>;
  val20_not_ends_with?: Maybe<String>;
  AND?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  OR?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  NOT?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
}

export interface VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput;
  data: VoteUpdateManyDataInput;
}

export interface VoteUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  val1?: Maybe<String>;
  val2?: Maybe<String>;
  val3?: Maybe<String>;
  val4?: Maybe<String>;
  val5?: Maybe<String>;
  val6?: Maybe<String>;
  val7?: Maybe<String>;
  val8?: Maybe<String>;
  val9?: Maybe<String>;
  val10?: Maybe<String>;
  val11?: Maybe<String>;
  val12?: Maybe<String>;
  val13?: Maybe<String>;
  val14?: Maybe<String>;
  val15?: Maybe<String>;
  val16?: Maybe<String>;
  val17?: Maybe<String>;
  val18?: Maybe<String>;
  val19?: Maybe<String>;
  val20?: Maybe<String>;
}

export interface VoteUpdateManyWithoutUpperVoteInput {
  create?: Maybe<
    VoteCreateWithoutUpperVoteInput[] | VoteCreateWithoutUpperVoteInput
  >;
  delete?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  connect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  set?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  disconnect?: Maybe<VoteWhereUniqueInput[] | VoteWhereUniqueInput>;
  update?: Maybe<
    | VoteUpdateWithWhereUniqueWithoutUpperVoteInput[]
    | VoteUpdateWithWhereUniqueWithoutUpperVoteInput
  >;
  upsert?: Maybe<
    | VoteUpsertWithWhereUniqueWithoutUpperVoteInput[]
    | VoteUpsertWithWhereUniqueWithoutUpperVoteInput
  >;
  deleteMany?: Maybe<VoteScalarWhereInput[] | VoteScalarWhereInput>;
  updateMany?: Maybe<
    VoteUpdateManyWithWhereNestedInput[] | VoteUpdateManyWithWhereNestedInput
  >;
}

export interface VoteUpdateWithWhereUniqueWithoutUpperVoteInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUpperVoteDataInput;
}

export interface VoteUpdateWithoutUpperVoteDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  lowerVote?: Maybe<VoteUpdateManyWithoutUpperVoteInput>;
  val1?: Maybe<String>;
  val2?: Maybe<String>;
  val3?: Maybe<String>;
  val4?: Maybe<String>;
  val5?: Maybe<String>;
  val6?: Maybe<String>;
  val7?: Maybe<String>;
  val8?: Maybe<String>;
  val9?: Maybe<String>;
  val10?: Maybe<String>;
  val11?: Maybe<String>;
  val12?: Maybe<String>;
  val13?: Maybe<String>;
  val14?: Maybe<String>;
  val15?: Maybe<String>;
  val16?: Maybe<String>;
  val17?: Maybe<String>;
  val18?: Maybe<String>;
  val19?: Maybe<String>;
  val20?: Maybe<String>;
}

export interface VoteUpsertWithWhereUniqueWithoutUpperVoteInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateWithoutUpperVoteDataInput;
  create: VoteCreateWithoutUpperVoteInput;
}

export interface VoteUpsertWithWhereUniqueNestedInput {
  where: VoteWhereUniqueInput;
  update: VoteUpdateDataInput;
  create: VoteCreateInput;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
}

export interface UserVoteCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  vote: VoteCreateOneInput;
  voteSelect: String;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface VoteCreateOneInput {
  create?: Maybe<VoteCreateInput>;
  connect?: Maybe<VoteWhereUniqueInput>;
}

export interface UserVoteUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  vote?: Maybe<VoteUpdateOneRequiredInput>;
  voteSelect?: Maybe<String>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  votes?: Maybe<VoteUpdateManyInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface VoteUpdateOneRequiredInput {
  create?: Maybe<VoteCreateInput>;
  update?: Maybe<VoteUpdateDataInput>;
  upsert?: Maybe<VoteUpsertNestedInput>;
  connect?: Maybe<VoteWhereUniqueInput>;
}

export interface VoteUpsertNestedInput {
  update: VoteUpdateDataInput;
  create: VoteCreateInput;
}

export interface UserVoteUpdateManyMutationInput {
  voteSelect?: Maybe<String>;
}

export interface VoteUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  upperVote?: Maybe<VoteUpdateManyWithoutLowerVoteInput>;
  lowerVote?: Maybe<VoteUpdateManyWithoutUpperVoteInput>;
  val1?: Maybe<String>;
  val2?: Maybe<String>;
  val3?: Maybe<String>;
  val4?: Maybe<String>;
  val5?: Maybe<String>;
  val6?: Maybe<String>;
  val7?: Maybe<String>;
  val8?: Maybe<String>;
  val9?: Maybe<String>;
  val10?: Maybe<String>;
  val11?: Maybe<String>;
  val12?: Maybe<String>;
  val13?: Maybe<String>;
  val14?: Maybe<String>;
  val15?: Maybe<String>;
  val16?: Maybe<String>;
  val17?: Maybe<String>;
  val18?: Maybe<String>;
  val19?: Maybe<String>;
  val20?: Maybe<String>;
}

export interface VoteUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  val1?: Maybe<String>;
  val2?: Maybe<String>;
  val3?: Maybe<String>;
  val4?: Maybe<String>;
  val5?: Maybe<String>;
  val6?: Maybe<String>;
  val7?: Maybe<String>;
  val8?: Maybe<String>;
  val9?: Maybe<String>;
  val10?: Maybe<String>;
  val11?: Maybe<String>;
  val12?: Maybe<String>;
  val13?: Maybe<String>;
  val14?: Maybe<String>;
  val15?: Maybe<String>;
  val16?: Maybe<String>;
  val17?: Maybe<String>;
  val18?: Maybe<String>;
  val19?: Maybe<String>;
  val20?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserVoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserVoteWhereInput>;
  AND?: Maybe<
    UserVoteSubscriptionWhereInput[] | UserVoteSubscriptionWhereInput
  >;
  OR?: Maybe<UserVoteSubscriptionWhereInput[] | UserVoteSubscriptionWhereInput>;
  NOT?: Maybe<
    UserVoteSubscriptionWhereInput[] | UserVoteSubscriptionWhereInput
  >;
}

export interface VoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VoteWhereInput>;
  AND?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  OR?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
  NOT?: Maybe<VoteSubscriptionWhereInput[] | VoteSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  votes: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  votes: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Vote {
  id: ID_Output;
  title: String;
  description: String;
  val1?: String;
  val2?: String;
  val3?: String;
  val4?: String;
  val5?: String;
  val6?: String;
  val7?: String;
  val8?: String;
  val9?: String;
  val10?: String;
  val11?: String;
  val12?: String;
  val13?: String;
  val14?: String;
  val15?: String;
  val16?: String;
  val17?: String;
  val18?: String;
  val19?: String;
  val20?: String;
}

export interface VotePromise extends Promise<Vote>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  upperVote: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lowerVote: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  val1: () => Promise<String>;
  val2: () => Promise<String>;
  val3: () => Promise<String>;
  val4: () => Promise<String>;
  val5: () => Promise<String>;
  val6: () => Promise<String>;
  val7: () => Promise<String>;
  val8: () => Promise<String>;
  val9: () => Promise<String>;
  val10: () => Promise<String>;
  val11: () => Promise<String>;
  val12: () => Promise<String>;
  val13: () => Promise<String>;
  val14: () => Promise<String>;
  val15: () => Promise<String>;
  val16: () => Promise<String>;
  val17: () => Promise<String>;
  val18: () => Promise<String>;
  val19: () => Promise<String>;
  val20: () => Promise<String>;
}

export interface VoteSubscription
  extends Promise<AsyncIterator<Vote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  upperVote: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lowerVote: <T = Promise<AsyncIterator<VoteSubscription>>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  val1: () => Promise<AsyncIterator<String>>;
  val2: () => Promise<AsyncIterator<String>>;
  val3: () => Promise<AsyncIterator<String>>;
  val4: () => Promise<AsyncIterator<String>>;
  val5: () => Promise<AsyncIterator<String>>;
  val6: () => Promise<AsyncIterator<String>>;
  val7: () => Promise<AsyncIterator<String>>;
  val8: () => Promise<AsyncIterator<String>>;
  val9: () => Promise<AsyncIterator<String>>;
  val10: () => Promise<AsyncIterator<String>>;
  val11: () => Promise<AsyncIterator<String>>;
  val12: () => Promise<AsyncIterator<String>>;
  val13: () => Promise<AsyncIterator<String>>;
  val14: () => Promise<AsyncIterator<String>>;
  val15: () => Promise<AsyncIterator<String>>;
  val16: () => Promise<AsyncIterator<String>>;
  val17: () => Promise<AsyncIterator<String>>;
  val18: () => Promise<AsyncIterator<String>>;
  val19: () => Promise<AsyncIterator<String>>;
  val20: () => Promise<AsyncIterator<String>>;
}

export interface VoteNullablePromise
  extends Promise<Vote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  upperVote: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  lowerVote: <T = FragmentableArray<Vote>>(args?: {
    where?: VoteWhereInput;
    orderBy?: VoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  val1: () => Promise<String>;
  val2: () => Promise<String>;
  val3: () => Promise<String>;
  val4: () => Promise<String>;
  val5: () => Promise<String>;
  val6: () => Promise<String>;
  val7: () => Promise<String>;
  val8: () => Promise<String>;
  val9: () => Promise<String>;
  val10: () => Promise<String>;
  val11: () => Promise<String>;
  val12: () => Promise<String>;
  val13: () => Promise<String>;
  val14: () => Promise<String>;
  val15: () => Promise<String>;
  val16: () => Promise<String>;
  val17: () => Promise<String>;
  val18: () => Promise<String>;
  val19: () => Promise<String>;
  val20: () => Promise<String>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserVote {
  id: ID_Output;
  voteSelect: String;
}

export interface UserVotePromise extends Promise<UserVote>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  vote: <T = VotePromise>() => T;
  voteSelect: () => Promise<String>;
}

export interface UserVoteSubscription
  extends Promise<AsyncIterator<UserVote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  vote: <T = VoteSubscription>() => T;
  voteSelect: () => Promise<AsyncIterator<String>>;
}

export interface UserVoteNullablePromise
  extends Promise<UserVote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  vote: <T = VotePromise>() => T;
  voteSelect: () => Promise<String>;
}

export interface UserVoteConnection {
  pageInfo: PageInfo;
  edges: UserVoteEdge[];
}

export interface UserVoteConnectionPromise
  extends Promise<UserVoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserVoteEdge>>() => T;
  aggregate: <T = AggregateUserVotePromise>() => T;
}

export interface UserVoteConnectionSubscription
  extends Promise<AsyncIterator<UserVoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserVoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserVoteSubscription>() => T;
}

export interface UserVoteEdge {
  node: UserVote;
  cursor: String;
}

export interface UserVoteEdgePromise
  extends Promise<UserVoteEdge>,
    Fragmentable {
  node: <T = UserVotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserVoteEdgeSubscription
  extends Promise<AsyncIterator<UserVoteEdge>>,
    Fragmentable {
  node: <T = UserVoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserVote {
  count: Int;
}

export interface AggregateUserVotePromise
  extends Promise<AggregateUserVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserVoteSubscription
  extends Promise<AsyncIterator<AggregateUserVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VoteConnection {
  pageInfo: PageInfo;
  edges: VoteEdge[];
}

export interface VoteConnectionPromise
  extends Promise<VoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VoteEdge>>() => T;
  aggregate: <T = AggregateVotePromise>() => T;
}

export interface VoteConnectionSubscription
  extends Promise<AsyncIterator<VoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVoteSubscription>() => T;
}

export interface VoteEdge {
  node: Vote;
  cursor: String;
}

export interface VoteEdgePromise extends Promise<VoteEdge>, Fragmentable {
  node: <T = VotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface VoteEdgeSubscription
  extends Promise<AsyncIterator<VoteEdge>>,
    Fragmentable {
  node: <T = VoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVote {
  count: Int;
}

export interface AggregateVotePromise
  extends Promise<AggregateVote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVoteSubscription
  extends Promise<AsyncIterator<AggregateVote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface UserVoteSubscriptionPayload {
  mutation: MutationType;
  node: UserVote;
  updatedFields: String[];
  previousValues: UserVotePreviousValues;
}

export interface UserVoteSubscriptionPayloadPromise
  extends Promise<UserVoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserVotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserVotePreviousValuesPromise>() => T;
}

export interface UserVoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserVoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserVoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserVotePreviousValuesSubscription>() => T;
}

export interface UserVotePreviousValues {
  id: ID_Output;
  voteSelect: String;
}

export interface UserVotePreviousValuesPromise
  extends Promise<UserVotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  voteSelect: () => Promise<String>;
}

export interface UserVotePreviousValuesSubscription
  extends Promise<AsyncIterator<UserVotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  voteSelect: () => Promise<AsyncIterator<String>>;
}

export interface VoteSubscriptionPayload {
  mutation: MutationType;
  node: Vote;
  updatedFields: String[];
  previousValues: VotePreviousValues;
}

export interface VoteSubscriptionPayloadPromise
  extends Promise<VoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VotePreviousValuesPromise>() => T;
}

export interface VoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VotePreviousValuesSubscription>() => T;
}

export interface VotePreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  val1?: String;
  val2?: String;
  val3?: String;
  val4?: String;
  val5?: String;
  val6?: String;
  val7?: String;
  val8?: String;
  val9?: String;
  val10?: String;
  val11?: String;
  val12?: String;
  val13?: String;
  val14?: String;
  val15?: String;
  val16?: String;
  val17?: String;
  val18?: String;
  val19?: String;
  val20?: String;
}

export interface VotePreviousValuesPromise
  extends Promise<VotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  val1: () => Promise<String>;
  val2: () => Promise<String>;
  val3: () => Promise<String>;
  val4: () => Promise<String>;
  val5: () => Promise<String>;
  val6: () => Promise<String>;
  val7: () => Promise<String>;
  val8: () => Promise<String>;
  val9: () => Promise<String>;
  val10: () => Promise<String>;
  val11: () => Promise<String>;
  val12: () => Promise<String>;
  val13: () => Promise<String>;
  val14: () => Promise<String>;
  val15: () => Promise<String>;
  val16: () => Promise<String>;
  val17: () => Promise<String>;
  val18: () => Promise<String>;
  val19: () => Promise<String>;
  val20: () => Promise<String>;
}

export interface VotePreviousValuesSubscription
  extends Promise<AsyncIterator<VotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  val1: () => Promise<AsyncIterator<String>>;
  val2: () => Promise<AsyncIterator<String>>;
  val3: () => Promise<AsyncIterator<String>>;
  val4: () => Promise<AsyncIterator<String>>;
  val5: () => Promise<AsyncIterator<String>>;
  val6: () => Promise<AsyncIterator<String>>;
  val7: () => Promise<AsyncIterator<String>>;
  val8: () => Promise<AsyncIterator<String>>;
  val9: () => Promise<AsyncIterator<String>>;
  val10: () => Promise<AsyncIterator<String>>;
  val11: () => Promise<AsyncIterator<String>>;
  val12: () => Promise<AsyncIterator<String>>;
  val13: () => Promise<AsyncIterator<String>>;
  val14: () => Promise<AsyncIterator<String>>;
  val15: () => Promise<AsyncIterator<String>>;
  val16: () => Promise<AsyncIterator<String>>;
  val17: () => Promise<AsyncIterator<String>>;
  val18: () => Promise<AsyncIterator<String>>;
  val19: () => Promise<AsyncIterator<String>>;
  val20: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Vote",
    embedded: false
  },
  {
    name: "UserVote",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
